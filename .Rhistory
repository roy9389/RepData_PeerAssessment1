a<-available.packages
install.packages("slidify")
data1 <- read.table("desktop/X_test.txt")
?read.table
data1 <- read.table("desktop/X_test.txt", ncols = 6)
?data.frame
data.frame(matrix(1:6, 2, 3))
q()
head(filldata)
setwd("~")
setwd("desktop/coursera/RepData_PeerAssessment1")
rawdata <- read.csv("activity.csv", header = T)
filldata <- rawdata
for (i in NArow) {
filldata[i,1] <- avstepdata[which(avstepdata$Interval==filldata[i,3]), 1]
}
NAs <- sum(is.na(rawdata$steps))
## find out which rows have NA values
NArow <- which(is.na(rawdata$steps))
## create a for loop to fill in the NA value one by one, with the mean number of steps from that missing interval
filldata <- rawdata
for (i in NArow) {
filldata[i,1] <- avstepdata[which(avstepdata$Interval==filldata[i,3]), 1]
}
stepSum <- with(rawdata, tapply(steps, date, sum))
totalStep <- data.frame(stepSum, Date = rownames(stepSum), row.names = NULL)
with(totalStep, hist(stepSum, xlab = "Total Steps Taken Per Day", main = NULL, breaks=10))
avstep <- with(rawdata, tapply(steps, interval, mean, na.rm = T))
## Transfer the list into a dataframe so we can make plots
avstepdata <- data.frame(avstep, Interval = rownames(avstep), row.names=NULL)
avstepdata$Interval <- as.character(avstepdata$Interval)
NAs <- sum(is.na(rawdata$steps))
## find out which rows have NA values
NArow <- which(is.na(rawdata$steps))
## create a for loop to fill in the NA value one by one, with the mean number of steps from that missing interval
filldata <- rawdata
for (i in NArow) {
filldata[i,1] <- avstepdata[which(avstepdata$Interval==filldata[i,3]), 1]
}
filldata$date <- as.Date(filldata$date)
filldata$day <- NA
for (i in 1:nrow(filldata)) {
if (weekdays(filldata[i,2]) %in% c("Saturday", "Sunday")) {
filldata[i,4] = "weekend"
} else {
filldata[i,4] = "weekday"
}
}
head(filldata)
?tapply
x <- with(filldata, tapply(steps, list(interval, day), mean))
x
class(x)
rownames(x)
names(x)
x[1]
x[2]
head(avsteapdata)
head(avstepdata)
head(avstep)
x[1,1]
x[1,2]
head(x)
y <- data.frame(x, Interval = rownames(x))
head(y)
y <- data.frame(y)
head(y)
y <- data.frame(x)
head(y)
names(y)
library(ggplot2)
library(ggplot2)
y$interval <- rownames(interval)
y$interval <- rownames(y)
head(y)
meltday <- melt(y, id = c("interval", "weekday", "weekend"), measure.vars = c("weekday", "hp")
)
?melt
library(reshape2)
meltday <- melt(y, id = c("interval", "weekday", "weekend"), measure.vars = c("weekday", "hp")
)
meltday <- melt(y, id = c("interval", "weekday", "weekend"), measure.vars = c("weekday", "weekend"))
head(meltday)
tail(meltday)
nrow(y)
meltday <- melt(y, id = c("interval"), measure.vars = c("weekday", "weekend"))
head(metlday)
head(meltday)
nrow(y)
names(meltday) <- c("interval", "day", "average.step")
names(meltday)
g <- ggplot(meltday, aes(average.step, day))
g + geom_line()
qplot(average.step, interval, data = meltday, facets = .~day, geom = "line")
qplot(interval, average.step, data = meltday, facets = .~day, geom = "line")
qplot(interval, average.step, data = meltday, facets = .~day)
qplot(interval, average.step, data = meltday, facets = day~.)
g <- ggplot(meltday, aes(interval, average.step))
g + geom_line() + facet_grid(day~.)
g + geom_point() + facet_grid(day~.)
library(lattice)
xyplot(interval ~ average.step | day, data=meltday, layout=c(2,1))
xyplot(average.step ~ interval | day, data=meltday, layout=c(2,1))
xyplot(average.step ~ interval | day, data=meltday, layout=c(1,2))
head(meltday)
xyplot(average.step ~ interval | day, data=meltday, type = "l", layout=c(1,2))
xyplot(average.step ~ interval | day, data=meltday, type = "p", layout=c(1,2))
hist(meltday$average.step)
with(meltday, plot(x = interval, y = average.step))
with(meltday, plot(x = interval, y = average.step, type = "l"))
xyplot(average.step ~ interval | day, data=meltday, type = "l", layout=c(1,2))
unique(meltday$day)
with(meltday, plot(x = interval, y = average.step, type = "l"))
unique(meltday$day)
xyplot(average.step ~ interval | day, data=meltday, type = "l", layout=c(1,2))
max(meltday$average.step)
unique(meltday$average.step)
xyplot(average.step ~ interval | day, data = meltday, type = "l", layout = c(1,2))
unique(meltday$interval)
View(meltday)
xyplot(average.step ~ interval | day, data = meltday, type = "l", layout = c(1,2))
write.csv(meltday, file = "meltday.csv")
class(meltday$average.step)
q()
